"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var models_1 = require("../models");
var services_1 = require("../services");
var dialogs_1 = require("ui/dialogs");
var router_extensions_1 = require("nativescript-angular/router/router-extensions");
var backend_service_1 = require("../services/backend.service");
var LoginComponent = (function () {
    function LoginComponent(firebaseService, routerExtensions) {
        this.firebaseService = firebaseService;
        this.routerExtensions = routerExtensions;
        this.isLoggingIn = true;
        this.isAuthenticating = false;
        this.user = new models_1.User();
        this.user.email = "sagearbor+ALguest@sagearbor.com";
        this.user.password = "Password";
    }
    LoginComponent.prototype.submit = function () {
        this.isAuthenticating = true;
        if (this.isLoggingIn) {
            this.login();
        }
        else {
            this.signUp();
        }
    };
    LoginComponent.prototype.login = function () {
        var _this = this;
        this.firebaseService.login(this.user)
            .then(function () {
            _this.isAuthenticating = false;
            _this.routerExtensions.navigate(["/"], { clearHistory: true });
        })
            .catch(function (message) {
            _this.isAuthenticating = false;
        });
    };
    LoginComponent.prototype.onPickerLoaded = function (args) {
        var datePicker = args.object;
        datePicker.year = 2010;
        datePicker.month = 6;
        datePicker.day = 6;
        datePicker.minDate = new Date(1940, 0, 1);
        datePicker.maxDate = new Date(2025, 12, 30);
    };
    LoginComponent.prototype.onDateChanged = function (args) {
        console.log("Date changed");
        console.log("New value: " + args.value);
        console.log("Old value: " + args.oldValue);
        this.user.dobInMilliseconds = args.value;
    };
    LoginComponent.prototype.onDayChanged = function (args) {
        console.log("Day changed");
        console.log("New value: " + args.value);
        console.log("Old value: " + args.oldValue);
        this.user.dobDD = args.value;
    };
    LoginComponent.prototype.onMonthChanged = function (args) {
        console.log("Month changed");
        console.log("New value: " + args.value);
        console.log("Old value: " + args.oldValue);
        this.user.dobMM = args.value;
    };
    LoginComponent.prototype.onYearChanged = function (args) {
        console.log("Year changed");
        console.log("New value: " + args.value);
        console.log("Old value: " + args.oldValue);
        this.user.dobYYYY = args.value;
    };
    LoginComponent.prototype.signUp = function () {
        var _this = this;
        console.log("GOT HEREE 1212 < ------------- " + JSON.stringify(this.user));
        console.log("GOT HEREE 1222 < ------------- " + JSON.stringify(this.user));
        /**   */
        var newUser = { email: this.user.email, userUID: backend_service_1.BackendService.token, fName: this.user.fName, lName: this.user.lName, dob: Date.now(), gender: this.user.gender, weight: this.user.weight, goalWeight: this.user.goalWeight, favActivity: this.user.favActivity };
        console.log("GOT HEREE 2121 < ------------- ");
        this.firebaseService.register(this.user)
            .then(function () {
            _this.isAuthenticating = false;
            _this.toggleDisplay();
            /**  */
            console.log("7777777777777777777777777" + JSON.stringify(_this.user));
            console.log("77777" + JSON.stringify(newUser));
            console.log("67777777777777777777777777" + JSON.stringify(_this.user));
        })
            .catch(function (message) {
            alert(message);
            _this.isAuthenticating = false;
        });
        /**  DONT INCLUDE AN ERROR MESSAGE OR IT OVERRIDES THE FB ERROR MESSAGE IF USER EMAIL ALREADY CREATED
        this.firebaseService.addNewUser(newUser.email,newUser.userUID,newUser.fName,newUser.lName,newUser.dob,newUser.gender,newUser.weight,newUser.goalWeight,newUser.favActivity)
        ;
           .then((message:any) => {alert(message);})
           */
    };
    LoginComponent.prototype.forgotPassword = function () {
        var _this = this;
        dialogs_1.prompt({
            title: "Forgot Password",
            message: "Enter the email address you used to register for ArborLife to reset your password.",
            defaultText: "",
            okButtonText: "Ok",
            cancelButtonText: "Cancel"
        }).then(function (data) {
            if (data.result) {
                _this.firebaseService.resetPassword(data.text.trim())
                    .then(function (result) {
                    if (result) {
                        alert(result);
                    }
                });
            }
        });
    };
    LoginComponent.prototype.toggleDisplay = function () {
        this.isLoggingIn = !this.isLoggingIn;
    };
    return LoginComponent;
}());
LoginComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: 'al-login',
        templateUrl: 'login.html'
    }),
    __metadata("design:paramtypes", [services_1.FirebaseService,
        router_extensions_1.RouterExtensions])
], LoginComponent);
exports.LoginComponent = LoginComponent;
//# sourceMappingURL=data:application/json;base64,